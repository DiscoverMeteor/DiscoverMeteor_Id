---
title: Templat
slug: templates
date: 0003/01/01
number: 3
contents: Mempelajari Handlebars, bahasa templat Meteor.|Membuat tiga templat pertama.|Mempelajari bagaimana manajer Meteor bekerja.|Memahami kerja prototipe dasar dengan data statis.
paragraphs: 46
---

Untuk memudahkan pengembangan menggunakan Meteor, kita akan mengadopsi pendekatan luar-dalam. Dengan kata lain kita akan membangun HTML/JavaScript dasar terlebih dahulu, baru kemudian mengaitkannya dalam app kita.

Artinya dalam bab ini kita hanya akan menyibukkan diri dengan apa yang terjadi dalam direktori `/client`.

Let's create a new file named `main.html` inside our `/client` directory, and fill it with the following code:

Mari membuat berkas baru dengan nama `main.html` dalam direktori `/client`, dan mengisinya dengan kode berikut:

~~~html
<head>
  <title>Microscope</title>
</head>
<body>
  <div class="container">
    <header class="navbar">
      <div class="navbar-inner">
        <a class="brand" href="/">Microscope</a>
      </div>
    </header>
    <div id="main" class="row-fluid">
      {{> postsList}}
    </div>
  </div>
</body>
~~~
<%= caption "client/main.html" %>

Ini akan menjadi templat utama app kita. Seperti yang Anda lihat, semuanya HTML kecuali tag `{{> postsList}}`, yang merupakan sisipan untuk `postsList`, templat berikutnya. Mari kita buat beberapa templat lagi.

### Templat Meteor

Pada intinya, situs berita sosial terdiri dari posting yang terorganisir dalam daftar, dan seperti itu pula kita akan mengatur templat kita.

Mari bikin direktori `/views` didalam `/client`. Ini akan menjadi pusat penyimpanan seluruh templat kita, dan untuk menjaga keringkasan kita juga akan membuat direktori `/post` didalam `/views` sekedar untuk templat-templat yg berkaitan dengan postingan.

<% note do %>

### Menemukan berkas

Meteor tu hebat dalam soal menemukan berkas. Dimanapun kamu letakkan kodemu selama masih dalam direktori `/client`, Meteor bakal menemukan dan menyusunnya dengan tepat. Ini berarti kamu tak perlu menulis path sertaan untuk berkas JavaScript atau CSS.

Ini juga berarti kamu bisa meletakkan semua berkas dalam satu direktori, atau bahkan semua kode dalam satu berkas. Namun karena Meteor akan menyusun segalanya menjadi satu berkas kecil, kita sebaiknya tetap menyusun berkas secara terstruktur.

<% end %>

Akhirnya kita sudah siap untuk templat kedua. Buat `posts_list.html` didalam `client/views/posts`:

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/views/posts/posts_list.html" %>

Kemudian `post_item.html`:

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
  </div>
</template>
~~~
<%= caption "client/views/posts/post_item.html" %>

Catat atribut `name="postsList"` templat. Ini merupakan nama yang akan digunakan Meteor merekam jejak templat mana kemana.

Saatnya memperkenalkan Spacebars, sistem penemplatan Meteor. Spacebars tu HTML juga, dengan tiga hal tambahan:  *partials*, *expressions* dan *block helpers*.

*Partials* menggunakan sintaks `{{> templateName}}` dan memberitahu Meteor agar menukar partials dengan templat senama (dalam kasus ini `postItem`).

*Expressions* seperti `{{title}}` antara memanggil properti obyek atau mengembalikan nilai templat helper seperti didefinisikan dalam manajer templat (pembahasan selanjutnya menyusul).

Finally, *block helpers* are special tags that control the flow of the template, such as `{{#each}}…{{/each}}` or `{{#if}}…{{/if}}`.
Terakhir, *block helpers* adalah tag khusus yang mengontrol alur templat, seperti `{{#each}}…{{/each}}` atau `{{#if}}…{{/if}}`.

<% note do %>

### Lebih Jauh

Kamu bisa merujuk ke [Spacebars documentation](https://github.com/meteor/meteor/blob/devel/packages/spacebars/README.md) jika kamu ingin belajar lebih soal Spacebars.

<% end %>

Dibekali dengan pengetahuan ini, kita dengan mudah dapat mencerna apa yang tengah terjadi.

Pertama-tama, pada templat `postsList`, kita memilah obyek `posts` menggunakan helper blok `{{#each}}…{{/each}}`. Kemudian untuk tiap pilahan kita sertakan templat `postItem`.

Darimana datangnya obyek `posts`? Pertanyaan bagus. Ini sebenarnya helper templat dan kita akan menggunakannya saat melihat manajer templat.

Templat `postItem` sebenarnya punya fungsi jelas. Dengan hanya menggunakan tiga ekspresi: `{{url}}` dan `{{title}}` yang menghasilkan properti dokumen dan `{{domain}}` memanggil helper templat.

Kita telah menyinggung "helper templat" berulang kali melalui bab ini tanpa menjelaskan kerja sebenarnya. Untuk bisa mengetahuinya, mari bicara soal manajer dulu.

### Manajer Templat

Kita sudah berurusan dengan Spacebars, yang tak lain HTML dengan sedikit taburan tag. Berbeda dengan bahasa-bahasa lain, sebut saja PHP (atau halaman HTML umumnya yang dapat menyertakan JavaScript), Meteor menjaga templat dan logik tetap terpisah.

Agar dapat bekerja, templat membutuhkan **manajer**. Kamu bisa menganggap manajer umpama juru masak yang meracik bumbu mentah (datamu) dan menyiapkannya, sebelum menyerahkan pada pelayan (templat) untuk disajikan padamu.

Dengan kata lain, sebab peran templat terbatas pada penyajian atau mengitari variabel-variabel, manajer menjadi satu-satunya yang melakukan pekerjaan berat menentukan nilai untuk tiap variabel.

<% note do %>

### Manajer?

////

////

////

<% end %>

////

~~~js
var postsData = [
  {
    title: 'Introducing Telescope',
    author: 'Sacha Greif',
    url: 'http://sachagreif.com/introducing-telescope/'
  }, 
  {
    title: 'Meteor',
    author: 'Tom Coleman',
    url: 'http://meteor.com'
  }, 
  {
    title: 'The Meteor Book',
    author: 'Tom Coleman',
    url: 'http://themeteorbook.com'
  }
];
Template.postsList.helpers({
  posts: postsData
});
~~~
<%= caption "client/views/posts/posts_list.js" %>

////

<%= screenshot "3-1", "Our first templates with static data" %>

<%= commit "3-1", "Added basic posts list template and static data." %>

////

////

////

~~~html
<template name="postsList">
  <div class="posts">
    {{#each posts}}
      {{> postItem}}
    {{/each}}
  </div>
</template>
~~~
<%= caption "client/views/posts/posts_list.html" %>

////

### The Value of "this"

////

~~~js
Template.postItem.helpers({
  domain: function() {
    var a = document.createElement('a');
    a.href = this.url;
    return a.hostname;
  }
});
~~~
<%= caption "client/views/posts/post_item.js" %>

<%= commit "3-2", "Setup a `domain` helper on the `postItem`." %>

////

<%= screenshot "3-2", "Displaying domains for each links." %>

////

////

////

////

<% note do %>

### JavaScript Magic

////

////

////

<% end %>

////

<% note do %>

### Hot Code Reload

////

////

////

<% end %>
